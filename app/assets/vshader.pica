; Basic PICA200 vertex shader

; Uniforms
.fvec projection[4]
.fvec jointTransforms[72]

; Constants
.constf ones(1.0, 1.0, 1.0, 1.0)
.constf zeros(0.0, 0.0, 0.0, 0.0)
.constf nums(1.0, 2.0, 3.0, 4.0)

; Outputs
.out outpos position
.out outtex texcoord0

; Inputs (defined as aliases for convenience)
.alias inpos         v0 ; fvec3
.alias innorm        v1 ; fvec3
.alias intex         v2 ; fvec2
.alias joint_ids     v3 ; ivec3
.alias joint_weights v4 ; fvec3

.proc main
	; Force the w component of inpos to be 1.0
	; r0 = inpos
	mov r0.xyz, inpos
	mov r0.w,   ones

	; localPos = Vec4(0.0, 0.0, 0.0, 1.0): r1
	mov r1.xyzw, zeros

	; localNorm = Vec4(0.0): r2

	; Animation transformations
	; For each joint id
		; Joint 1
		; Address offset = joint_id * 4
		mul r3.x, nums.w, joint_ids.x 
		mova a0.x, r3.x 
		
		; posePosition = transform[joint_id * 4 + n] * inpos: r3
		dp4 r3.x, jointTransforms[a0.x + 0], r0
		dp4 r3.y, jointTransforms[a0.x + 1], r0
		dp4 r3.z, jointTransforms[a0.x + 2], r0
		dp4 r3.w, jointTransforms[a0.x + 3], r0

		; posePosition *= weight
		mul r3, joint_weights.xxxx, r3
		
		; localPos += posePosition
		add r1, r1, r3

		; poseNorm = transform * innorm
		; poseNorm *= weight
		; localNorm += poseNormal


		; Joint 2
		; Address offset = joint_id * 4
		mul r3.x, nums.w, joint_ids.y 
		mova a0.x, r3.x 
		
		; posePosition = transform[joint_id * 4 + n] * inpos: r3
		dp4 r3.x, jointTransforms[a0.x + 0], r0
		dp4 r3.y, jointTransforms[a0.x + 1], r0
		dp4 r3.z, jointTransforms[a0.x + 2], r0
		dp4 r3.w, jointTransforms[a0.x + 3], r0

		; posePosition *= weight
		mul r3, joint_weights.yyyy, r3
		
		; localPos += posePosition
		add r1, r1, r3

		; poseNorm = transform * innorm
		; poseNorm *= weight
		; localNorm += poseNormal

		
		; Joint 3
		; Address offset = joint_id * 4
		mul r3.x, nums.w, joint_ids.z 
		mova a0.x, r3.x 
		
		; posePosition = transform[joint_id * 4 + n] * inpos: r3
		dp4 r3.x, jointTransforms[a0.x + 0], r0
		dp4 r3.y, jointTransforms[a0.x + 1], r0
		dp4 r3.z, jointTransforms[a0.x + 2], r0
		dp4 r3.w, jointTransforms[a0.x + 3], r0

		; posePosition *= weight
		mul r3, joint_weights.zzzz, r3
		
		; localPos += posePosition
		add r1, r1, r3

		; poseNorm = transform * innorm
		; poseNorm *= weight
		; localNorm += poseNormal

	; mov r1.xyz, inpos.xyz
	; mov r1.w, ones

	; outpos = projectionMatrix * localPos
	dp4 outpos.x, projection[0], r1
	dp4 outpos.y, projection[1], r1
	dp4 outpos.z, projection[2], r1
	dp4 outpos.w, projection[3], r1

	; outtex = intex
	mov outtex, intex

	; We're finished
	end
.end
